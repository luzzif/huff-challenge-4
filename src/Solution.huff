#define macro MAIN() = takes(0) returns(0) {
   calldatasize non_zero jumpi
   0x00 0x00 return

   non_zero:
      0x00 // [loop_counter]
      loop:
         0x01 // [loop_counter, calldatacopy_size]
         dup2 // [loop_counter, calldatacopy_size, loop_counter_copy]
         0x01 // [loop_counter, calldatacopy_size, loop_counter_copy, 1]
         add // [loop_counter, calldatacopy_size, loop_counter_plus_1]
         calldatasize // [loop_counter, calldatacopy_size, loop_counter_plus_1, calldata_size]
         sub // [loop_counter, calldatacopy_size, calldatacopy_index]
         dup3 // [loop_counter, calldatacopy_size, calldatacopy_index, calldatacopy_dest_offset]
         calldatacopy // [loop_counter]
         0x01 // [loop_counter, 0x01] 
         add // [increased_loop_counter]

      calldatasize // [increased_loop_counter, calldata_size]
      dup2 // [increased_loop_counter, calldata_size, increased_loop_counter_copy]
      slt // [increased_loop_counter, increased_loop_counter_copy < calldata_size]
      loop jumpi

      // before returning, the stack only contains the updated loop counter 
      // (the read calldata length in bytes) which becomes the first parameter 
      // in the return opcode
      0x00 return
}
